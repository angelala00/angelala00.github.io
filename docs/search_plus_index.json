{"./":{"url":"./","title":"Introduction","keywords":"","body":"路 尝试开始用gitbook记录我的路程 记录是为了自己查找方便 其实也是希望能够成文，给一些网友解惑，或者说是可以交流无奈，文笔比较差，文章缺少思路的建设，只是把想到的平铺直叙还是先满足自己的需求吧 "},"pages/road-20210112_encode.html":{"url":"pages/road-20210112_encode.html","title":"中文编码探索","keywords":"","body":"开始go 最近一直研究编码相关的问题，总觉得这是一个值得好好深入研究的课题最想弄清楚的就是中文乱码相关的问题，虽然每次都能解决，但每次解决都需要百度，而且每次我都不认为自己真正的理解了编码的原理，比如某一个web请求流程下来，到底经过了几次转码，再比如我Java代码System out出一个中文字符串，又经过了几次转码，我们看到的中文，在内存里是怎么样的存在，等等一系列问题让我不安于是先从中文编码开始，百度搜索了几篇文章，讲得还算比较容易理解当尝试拿到我的具体的地方理解的时候，还是有一定的问题 前几天开始用go，尝试处理了一些中文编码解码的工作，跟我想象的不太一样，看也不是没有收获，没有仔细的整理我自己的思路，先把仅有的一部分收获输出到页面，然后再根据自己的理解进行修改和优化 接下来的一步是把go的代码编译，在阿里云服务器上跑起来这个工作又折腾了小两个晚上，git安装，go安装，设置goproxy，gobuild，阿里云开端口，改页面，仍没有弄完，到ajax请求后端接口这一步了，明天继续吧 -2021年1月12日 tagsstart encode 中文编码 hex tagsstop "},"pages/road-20201229_go-start.html":{"url":"pages/road-20201229_go-start.html","title":"go-start","keywords":"","body":"开始go 工具站项目现在需要后端支持了，所以开始了后端的选型第一反应是用SpringBoot，后转念一想，公司正好有一项目需要用go来开发，我这个为什么不选择用go呢，把公司和个人的需求结合起来，双收益后来又思考到了Java与go，python等语言的对比，感觉好像Java很重，庞大，为什么会有这种感觉？go，python，node等都有快速入手的方式，Java怎么好像没有？maven不就是干这事的么？是我们没用对？这些还真有待于后面验证，再回来解答这个问题 对于今天，则开始go的旅程 第一步，mac安装上go环境 百度之，两种方式，一种去官网下载安装包，浏览器加载半天无响应，于是选择了第二种，brew install go方式安装 由于长时间没用brew，需要更新，也不快。。扛不住了，电脑更新着，我先睡了。。 -29号 第二步，用go和gin跑起来一个helloworld上次的更新完成了，go也安装完成，命令行执行 go version go version go1.15.6 darwin/amd64之前了解到了工作中用到的夜莺是用gin这个web框架开发的，我就开始gin的学习吧百度找到了两个链接，内容几乎一致第一步go get github.com/gin-gonic/ginget没响应，连接github超时，于是换代理$ go env -w GO111MODULE=on $ go env -w GOPROXY=https://goproxy.cn,direct 之后正常get第二步写一个main主类，main.go，里面开启一个端口输出helloworld执行 go run main.go报错 main.go:3:8: cannot find module providing package github.com/gin-gonic/gin: working directory is not part of a module百度关键词 working directory is not part of a modulego mod init godemo再次执行 go run main.go成功启动，看到helloworld -2021年1月3号 开始尝试了解一下gin的api根据夜莺的ams源码，也尝试了解了一点http.server我目前的理解是，http.server是一个http服务框架，gin是一个web框架，http.server可以用gin的对象作为handler来处理web请求目前是没有体会到用http.server的好处，推断肯定是可控性较强，有待以后体会接下来，我可以开始先直接用gin完成一个web接口的开发了 -1月6号 疑问点：对go的模块管理还不能够完全理解和掌握 tagsstart go 疑问 问题 待研究 tagsstop "},"pages/road-20201223_vue-seo.html":{"url":"pages/road-20201223_vue-seo.html","title":"vue-seo","keywords":"","body":"vue工程的seo方案解决过程 vue折腾了一段时间，工具站算是可以跑起来了，也可以增加某一个工具页面，只改动很少的部分即可然后考虑到了vue的seo问题，本身vue的seo是不友好的，百度搜索解决方案，有SSR，有SPA，这里略去很多内容 最终选择了spa开始折腾折腾了3天昨晚是生成了静态的html今天调整了tdk的内容，然后发现只能每个页面都一样，想想不合理，继续百度得到了vue-meta这个插件，明天继续尝试吧 -- 20201223 "},"pages/20201203_shell.html":{"url":"pages/20201203_shell.html","title":"记一次脚本异常现象排查","keywords":"","body":"记一个神奇的问题 在帮同事看一个脚本，执行结果非预期，解决了几个主要的点之后，出现了另外一个不正常的现象 脚本执行到一半被中止了，看了半天也看不出问题， 于是在脚本里打上日志输出，找到了退出的代码行，这行代码是执行另外一个程序，也是一个脚本 于是再次分析这个脚本，分析完整个流程，也没有发现问题，逻辑都是正常的，但这里没有再加打印日志了 想不清楚是啥原因了，于是想把脚本简化， 复制了一个脚本文件，改名simple.sh，删除掉大部分逻辑，只留下从头到报错位置的代码 一执行，正常了，这会就有点奇怪了 不知道代码从哪里再拆分一下，于是先把全量代码再复制一遍看执行效果 cat install_n9e_agent.sh > simple.sh 再执行simple.sh，居然正常了 再回来执行instal_n9e_agent.sh还是不正常 这就让我觉得很神奇了 对比了文件权限，对比了文件内容，全都一样，就执行结果不一样 这时求助组里一位大神 描述清楚问题之后 先是咨询diff两个文件， 再是set -x让shell打印出当前执行的脚本，还是定位到之前我用日志排查到的位置，control这个脚本 大神思考到了文件名可能有影响，拿文件名去control里面搜，我一下子意识到了问题所在 control这里面有kill进程的逻辑，这个逻辑匹配了n9e相关的进程，结果把父亲进程给杀死了 回想起来自己排查的整个过程， 其实从脚本意外中止的时候也能看出一些线索，打印了一个terminated，有经验的话是能意识到，程序由于某些原因被中断了，这个需要靠经验 另外一个点就是我通过打印日志的方式已经定位到了control，但是没有看出问题，看control的逻辑都没问题，就没有关联想到外面执行的脚本名字正在kill匹配范围之内 "},"pages/road-20201202_gitbook_build_dir.html":{"url":"pages/road-20201202_gitbook_build_dir.html","title":"gitbook build输出指定目录","keywords":"","body":"gitbook build 输出到非默认目录 场景：github page功能，可选择的目录，只有root和docs 所以需要gitbook生成到docs目录 没记住命令，第二次百度~~~ gitbook build ./ ./book 参考：https://www.jianshu.com/p/8dd71a87627a tagsstart gitbook tagsstop "},"pages/road-20201201_rollback-a-commit.html":{"url":"pages/road-20201201_rollback-a-commit.html","title":"删除某一次commit操作","keywords":"","body":"git回滚某一次commit 场景：由于某些原因想撤消掉某一次commit的改动，恰好这次的改动与前后的commit文件互不冲突， 于是根据自己的理解+百度+实操 1，查看历史记录，git log -n （n是想要看最近几次，不确定可以多尝试几次）找到最近的几次提交，最好是找到要回滚的那一次提交的前一两次，人工确保是要操作的内容 2，打patch，git format-patch -n，会打出n个patch，每个patch对应一个commit 3，回退，git reset –hard commit-id，回退到要删除的commit之前一次commit-id 4，合并patch，可以把想要删掉的那一次的commit对应的patch删除掉 然后合并其它 git am *.patch，也可直接按顺序合并每一次commit对应的patch 5，reset到master，git reset 最新一次commitID，这里没有尝试git reset master，参考的链接中没有这一步以及后面，所以同事在操作到这里 再一pull之后又全都回到最新代码了。 6，commit，把改动提交，相当于将刚才的操作作为一次修改，commit掉 7，push，到这一步之前，你所做的所有操作均可以恢复，所以不要怕操作错，大胆尝试，push之前可以确认好了再push 参考：https://blog.csdn.net/molaifeng/article/details/52671810 通过这次解决问题，对git reset的理解深刻了一层（以为理解了，想要写出来的时候，发现还是写不出来。。。） git reset git reset --hard 我用到的git reset三个使用场景 1，重新commit 2，本次中的第3步 3，本次中的第5步 应该是可以总结一下的，这里暂时放弃 下次总结的时候可参考如下url https://www.jianshu.com/p/c2ec5f06cf1a tagsstart git tagsstop "},"pages/road-20201125_code.html":{"url":"pages/road-20201125_code.html","title":"乱码解决思路","keywords":"","body":"乱码解决思路 今天尝试解决一个乱码问题，经过各种边界排查后，确定是python脚本处理字符集的问题 没有更好的思路，不知道尝试用哪个编码来解， 后来猜想是否可以根据乱码将字符串还原，或者根据乱码能找到编码，于是百度一下 发现真的有人有这个答案 `========================= gbk=>utf-8：���Ĳ��� utf-8=>gbk：涓枃娴嬭瘯 iso8859-1=>utf-8：???? utf-8=>iso8859-1：ä¸­æ–‡æµ‹è¯• gbk=>iso8859-1：ÖÐÎÄ²âÊÔ iso8859-1=>gbk：???? `========================= 参考： https://blog.csdn.net/longzhiwuing/article/details/79768162 tagsstart 乱码 编码 tagsstop "},"pages/road-20190228_location-problem.html":{"url":"pages/road-20190228_location-problem.html","title":"问题定位思考","keywords":"","body":"线上问题定位 1.找出系统包含哪些部分 2.找出各部分的边界 3.找出各部分内部资源限制 线上问题也分很多种类型，分硬件，软件软件又分系统和应用系统可能分物理机系统虚拟机系统docker容器等应用可能分环境应用，业务服务应用，以上各个环节和部分都可能会产生问题而通常问题产生最多的地方一般是业务服务应用 首先我们需要从上到下，从整体到局部对系统有一定的了解，才能快速定位问题那么对系统的了解有哪些呢首先就是系统资源的掌握cpu使用率，内存使用率，磁盘io，网络io，接下来是docker容器级别的的各个资源，接下来是jvm的资源再接下来是连接池等资源线上问题通常也是资源不够用引起的 收集信息，看错误日志，流量变化曲线，看资源使用情况，如果都没问题可能需要看jvm等针对jvm又是一大学问 关于线上问题定位，是可以总结出一系列的文章 tagsstart 问题定位 tagsstop "},"tags.html":{"url":"tags.html","title":"Tags","keywords":"","body":"encode 中文编码探索 中文编码 中文编码探索 hex 中文编码探索 go go-start 疑问 go-start 问题 go-start 待研究 go-start gitbook gitbook build输出指定目录 git 删除某一次commit操作 乱码 乱码解决思路 编码 乱码解决思路 问题定位 问题定位思考 "}}